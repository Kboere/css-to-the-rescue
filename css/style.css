* {
    border: 0;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  :root {
    --hue: 223;
    --hue-center: 18;
    --hue-off: 3;
    --hue-on: 133;
    --bg: hsl(var(--hue), 90%, 85%);
    --fg: hsl(var(--hue), 90%, 10%);
    --trans-dur: 0.3s;
    --trans-timing: cubic-bezier(0.65, 0, 0.35, 1);
    /* font-size: calc(56px + (112 - 56) * (100vw - 280px) / (3840 - 280)); */
  }
  body, input {
    font: 1em/1.5 sans-serif;
  }
  body {
    background-color: var(--bg);
	display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
	height: 100dvh;
  }

/*-------------------------*/
/* Switch button (party-mode) */
/*-------------------------*/
  .switch {
    --licked: 0;
    --opacity: calc(1 - var(--licked)* 0.6);
    --scale: calc(1 - var(--licked)* 0.4);
    --scale-y: calc(1 - var(--licked)* 0.2);
    --shadow-n: calc(-0.0625em*(1 - var(--licked)));
    --shadow-p: calc(0.0625em*(1 - var(--licked)));
    position: absolute;
	left: 0;
	top: 0;
    display: block;
    width: fit-content;
}
  .switch__input {
    cursor: pointer;
    display: block;
    outline: transparent;
    position: relative;
    width: 75px;
    height: 150px;
    transition: background-color var(--trans-dur), box-shadow calc(var(--trans-dur) / 2);
    -webkit-appearance: none;
    appearance: none;
}
  .switch__input:before, .switch__input:after {
    transition: box-shadow var(--trans-dur) var(--trans-timing), transform var(--trans-dur) var(--trans-timing);
  }
  .switch__input:before {
    background-color: hsl(var(--hue), 10%, 90%);
    border-radius: 0.0625em;
    box-shadow: -0.0625em 0 0 white inset, 0 0 0 hsl(var(--hue), 10%, 80%) inset;
    top: 50%;
    left: 0;
    width: calc(100% - 5px);
    height: 10px;
    transform: translateX(0%) rotate(-25deg);
    transform-origin: 0% 0;
}
  .switch__input:after {
    background-color: hsl(var(--hue-center), 70%, 30%);
    border-radius: 50%;
    box-shadow: 0.0625em -0.0625em 0 hsl(var(--hue-center), 70%, 20%) inset, 0 0 0 0.125em hsl(var(--hue-center), 70%, 30%) inset, -0.1875em 0.1875em 0 hsl(var(--hue-center), 70%, 40%) inset;
    top: 2.3em;
    right: 0;
    width: 30px;
    height: 30px;
}
  .switch__input:checked:before {
    transform: rotate(25deg) translateX(4px);
}
  .switch__input:checked:after {
    transform: translateY(3.6em);
}
  .switch__input:focus-visible {
    box-shadow: 0 0 0 0.0625em hsl(var(--hue), 90%, 70%) inset, 0 0 0.125em 0.125em hsl(var(--hue), 90%, 50%);
  }
  .switch__input:before, 
  .switch__input:after {
    content: "";
    display: block;
    position: absolute;
  }
  .switch__label {
    overflow: hidden;
    position: absolute;
    width: 1px;
    height: 1px;
  }

/*-------------------------*/
/* arcade box */
/*-------------------------*/

/*  the box */
article {
	--size-article: 16em;
	--size-output: 3em;

	/* max distance to the left or to the top */
	--distance-max: calc(var(--size-article) - var(--size-output));

	width: var(--size-article);
	aspect-ratio: 1;
	/* background-color:blue; */

	/* output starts at left bottom */
	display: grid;
	place-items: start start;
	transform-style: preserve-3d;
	/* transition: transform 0.3s ease; */
	/* perspective: 100px; */
	animation: spin 5s infinite linear paused;
}

article:hover {
	animation-play-state: running;
}

.face {
	position: absolute;
	width: var(--size-article);
	background-color: rgba(255, 255, 255, 0.2);
	border: 1px solid #878787;
}

.front {
	transform: translateZ(-8em);
}

.back {
	transform: rotateY(180deg) translateZ(-8em);
}

.right {
	transform: rotateY(-90deg) translateZ(-8em);
}

.left {
	transform: rotateY(90deg) translateZ(-8em);
}

@keyframes spin {
	100% {
		transform: rotateY(360deg);
	}
}

/* output */
@property --up {
	syntax: "<number>";
	inherits: true;
	initial-value: 0;
}

@property --left {
	syntax: "<number>";
	inherits: true;
	initial-value: 0;
}

@property --right {
	syntax: "<number>";
	inherits: true;
	initial-value: 0;
}

@property --down {
	syntax: "<number>";
	inherits: true;
	initial-value: 0;
}

/* all values start at 0 */
@keyframes up {
	to {
		/* --up:5; */
		transform: translateZ(8em);
	}
}

@keyframes left {
	to {
		--left: 5;
	}
}

@keyframes right {
	to {
		--right: 5;
	}
}

@keyframes down {
	to {
		/* -down:5; */
		transform: translateZ(-8em);
	}
}

output {
	display: block;
	width: var(--size-output);
	aspect-ratio: 1;
	background-color: #f09;

	/* // animations control the value of the custom properties
	// start at 0
	// each animation is changed from paused to running with :has in the interaction section */
	animation:
		up 5s linear both paused,
		left 10s linear both paused,
		right 10s linear both paused,
		down 5s linear both paused;

	/* add clamp to keep the output in the article */
	translate: clamp(
		0em, 
		calc((var(--distance-max)) * (var(--right) - var(--left))), 
		var(--distance-max)
		)

	 	clamp(
			0em, 
			calc((var(--distance-max)) * (var(--down) - var(--up))), 
			var(--distance-max))
	;
}

/* interaction */

/* change up animation form paused to running */
html:has(button:nth-of-type(1):active) output {
	animation-play-state: running, paused, paused, paused;
}

html:has(button:nth-of-type(2):active) output {
	animation-play-state: paused, running, paused, paused;
}

html:has(button:nth-of-type(3):active) output {
	animation-play-state: paused, paused, running, paused;
}

html:has(button:nth-of-type(4):active) output {
	animation-play-state: paused, paused, paused, running;
}

/* BUTTONS */
div {
	display: grid;
	/* grid-template-columns:repeat(3, 1fr); */
	grid-template-areas:
		".    up   ."
		"left .    right"
		".    down .";

	/* width:12em; */

	width: 16rem;
	height: 16rem;
	display: grid;

	grid-gap: 0.5rem;
	grid-template-columns: 45fr 60fr 45fr;
	grid-template-rows: 45fr 60fr 45fr;

	transition: 0.1s;
}

div button {
	/* aspect-ratio:1;
	border:none;
	border-radius:50%; */

	color: #fff;
	background: rgb(55, 50, 50);
	border: none;
	position: relative;
	cursor: pointer;

	--driehoek: -2.125rem;
}

div button:before {
	display: block;
	content: "";
	position: absolute;
	width: 4.25rem;
	height: 4.25rem;
	transform: rotate(45deg);
	background: rgb(55, 50, 50);
}

div button:hover,
div button:hover:before,
div button:focus-visible,
div button:focus-visible:before {
	background-color: rgb(85, 55, 55);
	outline: none;
}

div button:nth-of-type(1) {
	grid-area: up;
	border-radius: 0.5rem 0.5rem 0 0;
}

div button:nth-of-type(1):before {
	left: calc(50% - 2.125rem);
	bottom: var(--driehoek);
	z-index: -1;
}

div button:nth-of-type(2) {
	grid-area: left;
	border-radius: 0.5rem 0 0 0.5rem;
}

div button:nth-of-type(2):before {
	right: var(--driehoek);
	top: calc(50% - 2.125rem);
	z-index: -1;
}

div button:nth-of-type(3) {
	grid-area: right;
	border-radius: 0 0.5rem 0.5rem 0;
}

div button:nth-of-type(3):before {
	left: var(--driehoek);
	top: calc(50% - 2.125rem);
	z-index: -1;
}

div button:nth-of-type(4) {
	grid-area: down;
	border-radius: 0 0 0.5rem 0.5rem;
}

div button:nth-of-type(4):before {
	left: calc(50% - 2.125rem);
	top: var(--driehoek);
	z-index: -1;
}

div:has(button:nth-of-type(1):active) {
	transform: perspective(50em) rotateX(10deg);
}

div:has(button:nth-of-type(2):active) {
	transform: perspective(50em) rotateY(-10deg);
}

div:has(button:nth-of-type(3):active) {
	transform: perspective(50em) rotateY(10deg);
}

div:has(button:nth-of-type(4):active) {
	transform: perspective(50em) rotateX(-10deg);
}

/*-------------------------*/
/* darkmode */
/*-------------------------*/
@media (prefers-color-scheme: dark) {
	:root {
		--bg: hsl(var(--hue), 90%, 10%);
		--fg: hsl(var(--hue), 90%, 90%);
	}

	.switch__input:focus-visible {
		box-shadow:
			0 0 0 0.0625em hsl(var(--hue), 90%, 30%) inset,
			0 0 0.125em 0.125em hsl(var(--hue), 90%, 60%);
	}
}